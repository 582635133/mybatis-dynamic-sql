<html>
<head>
<title>Why Does This Exist?</title>
</head>
<body>
<h1>Why Does This Exist?</h1>
<p>MyBatis Query By Example (QBE) is a small library focused on one thing - building where clauses for JDBC
(and MyBatis in particular).</p>
<h2>Do We Really Need Another SQL Abstractor?</h2>
<p>This is a valid question, and of course the answer is "no".  But here's the thing - this is not an
SQL abstractor.  This tool is consistent with the MyBatis philosophy of embracing SQL.  The API
for building where clauses is as close to SQL as possible, and the output of the tool is SQL.  The tool does
not implement any abstractions to account for differences in database.  All that's included is 100% standard
SQL.  It is certainly possible to extend this tool to write vendor specific queries, but that will be left to
the users of this tool.</p>
<p>Another thing to note is that this library is very small and does only one thing.  It is simple to use and
requires almost no setup.  It will easily fit in to your existing MyBatis environment or plain JDBC environment
if you're still doing that.</p>
<h2>The Real Motivation</h2>
<p>MyBatis Generator is a code generator for MyBatis.  Judging from the download statistics on Maven central,
Bintray, and the Eclipse marketplace it is widely used.  One of the strengths of MyBatis Generator is that
it builds a dynamic query capability (selectByExample, deleteByExample, updateByExample).  But the code
generated to enable this capability is not great code.  It is huge, it contains a lot of what looks like
copy/paste code, it is hard to understand, and hard to extend.  There are reasons why the code looks that way
- primarily because it was originally conceived for iBatis and doesn't take advantage of the capabilities of
MyBatis.</p>
<p>By far the worst thing about the MyBatis Generator code is that it is inflexible. Only a small class of
dynamic queries can be created with that code.  Anything beyond the most simple cases requres a deep dive
into boolean algebra.</p>
   
<p>So MyBatis QBE was originally conceived as a simple way to solve the problems with the code generated by MyBatis
Generator.  But we soon realized that this library can stand on it's own.  Yes it will work with the generator,
but we think it might have uses outside the generator as well.</p>
<p>MyBatis Generator will ultimately be updated to generate code that uses MyBatis QBE rather
than the current overly verbose code.  In doing so, the *ByExample methods will gain tremendous flexibility,
at the loss of backwards compatibility. We think it will be worth it!</p>
</body>
</html>
